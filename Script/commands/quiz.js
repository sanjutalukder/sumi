const axios = require("axios");

module.exports.config = {
  name: "quiz",
  version: "2.0.0",
  permission: 0,
  credits: "Developer",
  description: "API ‡¶•‡ßá‡¶ï‡ßá ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡¶æ‡¶® ‡¶è‡¶¨‡¶Ç ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶ú‡ßç‡¶û‡¶æ‡¶® ‡¶™‡¶∞‡ßÄ‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®",
  prefix: false,
  premium: false,
  category: "‡¶ß‡¶æ‡¶Å‡¶ß‡¶æ‡¶∞ ‡¶ñ‡ßá‡¶≤‡¶æ",
  usages: "quiz [guide]",
  cooldowns: 5,
  dependencies: {
    "axios": ""
  }
};

const timeoutDuration = 30 * 1000; // ‡ß©‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°

module.exports.run = async function ({ api, event, args }) {
  const { threadID, senderID, messageID } = event;

  if (args[0]?.toLowerCase() === "guide") {
    return api.sendMessage(
      `üß† | ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶ñ‡ßá‡¶≤‡¶æ‡¶∞ ‡¶ó‡¶æ‡¶á‡¶° ‚ú®\n\n` +
      `‚û§ ‡¶ï‡¶Æ‡¶æ‡¶®‡ßç‡¶°: quiz\n` +
      `‚û§ API ‡¶•‡ßá‡¶ï‡ßá ‡¶è‡¶≤‡ßã‡¶Æ‡ßá‡¶≤‡ßã ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶® ‡¶™‡¶æ‡¶¨‡ßá‡¶®‡•§\n` +
      `‚û§ ‡ß™‡¶ü‡¶ø ‡¶Ö‡¶™‡¶∂‡¶® ‡¶•‡ßá‡¶ï‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞‡¶ü‡¶ø ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶® (0-3 ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®)‡•§\n` +
      `‚û§ ‡ß©‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®!\n` +
      `‚û§ ‡¶≠‡ßÅ‡¶≤ ‡¶π‡¶≤‡ßá ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®!\n\n` +
      `‚ö° ‡¶∂‡ßÅ‡¶≠‡¶ï‡¶æ‡¶Æ‡¶®‡¶æ!`, 
      threadID, 
      messageID
    );
  }

  try {
    const res = await axios.get("https://masterapi.fun/api/quiz");
    const item = res.data;

    if (!item.question || !item.options || item.answer === undefined) {
      throw new Error("Invalid quiz data");
    }

    const correctAnswerText = item.options[item.answer];
    const optionsList = item.options.map((opt, index) => `${index}. ${opt}`).join("\n");

    const quizMsg = `üìù ‡¶™‡ßç‡¶∞‡¶∂‡ßç‡¶®: ${item.question}\n‡¶¨‡¶ø‡¶≠‡¶æ‡¶ó: ${item.category}\n‡¶∏‡ßç‡¶§‡¶∞: ${item.difficulty}\n\n${optionsList}\n\nüí° ‡¶á‡¶ô‡ßç‡¶ó‡¶ø‡¶§: ${item.hint}\n\n‚úèÔ∏è ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶§‡ßá 0 ‡¶•‡ßá‡¶ï‡ßá 3 ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®!\n‚è≥ ‡¶∏‡¶Æ‡ßü: ‡ß©‡ß¶ ‡¶∏‡ßá‡¶ï‡ßá‡¶®‡ßç‡¶°!`;

    return api.sendMessage(quizMsg, threadID, async (err, info) => {
      const timeout = setTimeout(() => {
        try {
          api.unsendMessage(info.messageID);
          api.sendMessage(`‚è∞ | ‡¶∏‡¶Æ‡ßü ‡¶∂‡ßá‡¶∑! ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶õ‡¶ø‡¶≤: ${correctAnswerText}`, threadID);
        } catch (e) {
          console.error("Timeout error:", e);
        }
      }, timeoutDuration);

      // Push to handleReply system
      global.client.handleReply.push({
        name: this.config.name,
        messageID: info.messageID,
        author: senderID,
        answer: item.answer,
        correctAnswer: correctAnswerText,
        timeout
      });
    });

  } catch (error) {
    console.error("Quiz error:", error);
    return api.sendMessage("‚ùå | ‡¶ï‡ßÅ‡¶á‡¶ú ‡¶°‡ßá‡¶ü‡¶æ ‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡ßü‡ßá‡¶õ‡ßá!", threadID, messageID);
  }
};

module.exports.handleReply = async function ({ api, event, handleReply }) {
  const { threadID, senderID, messageID, body } = event;

  if (senderID !== handleReply.author) return;

  const userAnswer = parseInt(body.trim());
  if (isNaN(userAnswer) || userAnswer < 0 || userAnswer > 3) {
    return api.sendMessage("‚ö†Ô∏è | ‡¶¶‡ßü‡¶æ ‡¶ï‡¶∞‡ßá 0 ‡¶•‡ßá‡¶ï‡ßá 3 ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡ßá‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶®!", threadID, messageID);
  }

  clearTimeout(handleReply.timeout);

  try {
    await api.unsendMessage(handleReply.messageID);
  } catch (e) {
    console.error("Unsend error:", e);
  }

  if (userAnswer === handleReply.answer) {
    return api.sendMessage(`‚úÖ | ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞! ‡¶Ü‡¶™‡¶®‡¶ø Â§©Êâç„Åß„Åô„Å≠!`, threadID, messageID);
  } else {
    return api.sendMessage(`‚ùå | ‡¶≠‡ßÅ‡¶≤ ‡¶â‡¶§‡ßç‡¶§‡¶∞! ‡¶∏‡¶†‡¶ø‡¶ï ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶õ‡¶ø‡¶≤: ${handleReply.correctAnswer}`, threadID, messageID);
  }
};
